{"version":3,"sources":["../../js/namespace.js","../../js/map.js","../../js/iowa.js","../../js/components/answers-model.js","../../js/components/answer-collection.js","../../js/quadtree-example.js"],"names":[],"mappings":"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","file":"quadtree.js","sourcesContent":["(function(global) {\n    'use strict';\n\n    function ns (parent_ns, ns_string, extent) {\n        var ns_parts = ns_string.split('.'),\n            hlq = 'app',\n            parent = parent_ns,\n            i;\n\n        if (ns_parts[0] === hlq) {\n            ns_parts = ns_parts.slice(0);\n        }\n\n        for (i = 0; i < ns_parts.length; i += 1) {\n            if (parent[ns_parts[i]] === undefined) {\n                if (extent) {\n                    parent[ns_parts[i]] = extent;\n                } else {\n                    parent[ns_parts[i]] = {};\n                }\n            }\n\n            parent = parent[ns_parts[i]];\n        }\n\n        return parent;\n    }\n\n    function bindNS (parent_ns, ns_string, extent) {\n        ns.apply(this, [parent_ns, ns_string, extent]);\n    }\n\n    global.app = {\n        ns: ns,\n        bindNS: bindNS\n    };\n\n}(this));\n","function initialize() {\n    var mapOptions = {\n        center: new google.maps.LatLng(40.01144663490021, -90.22767623046876),\n        zoom: 7\n    };\n    var map = new google.maps.Map(document.getElementById(\"map-canvas\"),\n        mapOptions);\n\n    app.ns(app, 'map', map);\n\n    google.maps.event.addListener(map, 'idle', function () {\n        Backbone.Events.trigger('map-idle');\n    });\n\n    google.maps.event.addListener(map, 'zoom_changed', function () {\n        Backbone.Events.trigger('zoom-change', map.getBounds());\n    });\n\n    google.maps.event.addListener(map, 'bounds_changed', function () {\n        Backbone.Events.trigger('bounds-change', map.getBounds());\n    });\n\n    google.maps.event.addListenerOnce(map, 'idle', function () {\n        Backbone.Events.trigger('map-loaded');\n    });\n}\ngoogle.maps.event.addDomListener(window, 'load', initialize);","(function (app) {\n    app.ns(app, 'IowaGeoJson', function () {\n        return [\n            {\"type\":\"FeatureCollection\",\"properties\":{\"kind\":\"state\",\"state\":\"IA\"},\"features\":[\n                {\"type\":\"Feature\",\"properties\":{\"kind\":\"county\",\"name\":\"Dallas\",\"state\":\"IA\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[-93.8166,41.8638],[-93.7892,41.5133],[-93.8221,41.5078],[-94.2438,41.5023],[-94.2438,41.6009],[-94.2821,41.6009],[-94.2821,41.8638],[-94.1617,41.8638],[-93.8166,41.8638]]]]}}\n            ]},\n            {\"type\":\"FeatureCollection\",\"properties\":{\"kind\":\"state\",\"state\":\"IA\"},\"features\":[\n                {\"type\":\"Feature\",\"properties\":{\"kind\":\"county\",\"name\":\"Polk\",\"state\":\"IA\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[-93.7728,41.8638],[-93.6961,41.8638],[-93.3456,41.8638],[-93.3292,41.5078],[-93.3292,41.4914],[-93.7071,41.5133],[-93.7892,41.5133],[-93.8166,41.8638],[-93.7728,41.8638]]]]}}\n            ]},\n            {\"type\":\"FeatureCollection\",\"properties\":{\"kind\":\"state\",\"state\":\"IA\"},\"features\":[\n                {\"type\":\"Feature\",\"properties\":{\"kind\":\"county\",\"name\":\"Warren\",\"state\":\"IA\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[-93.7071,41.5133],[-93.3292,41.4914],[-93.3292,41.1627],[-93.5592,41.1627],[-93.6742,41.1627],[-93.7892,41.1627],[-93.7892,41.5133],[-93.7071,41.5133]]]]}}\n            ]},\n            {\"type\":\"FeatureCollection\",\"properties\":{\"kind\":\"state\",\"state\":\"IA\"},\"features\":[\n                {\"type\":\"Feature\",\"properties\":{\"kind\":\"county\",\"name\":\"Madison\",\"state\":\"IA\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[-93.8221,41.5078],[-93.7892,41.5133],[-93.7892,41.1627],[-94.0138,41.1573],[-94.2438,41.1573],[-94.2438,41.5023],[-93.8221,41.5078]]]]}}\n            ]}\n        ];\n    });\n}(app));","(function (app) {\n    app.ns(app, 'AnswersModel', Backbone.Model.extend({\n        initialize: function () {  }\n    }));\n}(app));","(function (app) {\n    app.ns(app, 'AnswerCollection', Backbone.Collection.extend({\n        model: app.AnswersModel,\n\n        initialize: function () {\n            this.loaded = $.Deferred();\n        },\n\n        fetch: function () {\n            var jqXHR = Backbone.Collection.prototype.fetch.apply(this, arguments);\n\n            jqXHR.done(this.loaded.resolve);\n            jqXHR.fail(this.loaded.reject);\n        },\n\n        parse: function(response) {\n            return response.items;\n        },\n        url: 'http://api.stackexchange.com/2.2/tags/reactjs/faq?site=stackoverflow'\n    }));\n}(app));","(function (app) {\n    var collection = new Backbone.Collection(),\n        loaded = collection.fetch({url: '/dummy-data.json'}),\n        mapLoaded = $.Deferred(),\n        rects = [];\n\n    function convertLatLngToXy(latLng) {\n        var projection = app.map.getProjection(),\n            gLatLng = new google.maps.LatLng(latLng.lat, latLng.lng),\n            point = projection.fromLatLngToPoint(gLatLng);\n\n        return {x: point.x, y: point.y};\n    }\n\n    function convertGoogleMapBoundsToXY(inputBounds) {\n        var bounds = inputBounds || app.map.getBounds(),\n            swLatLng = bounds.getSouthWest(),\n            neLatLng = bounds.getNorthEast(),\n\n            swXY = convertLatLngToXy({\n                lat: swLatLng.lat(),\n                lng: swLatLng.lng()\n            }),\n\n            neXY = convertLatLngToXy({\n                lat: neLatLng.lat(),\n                lng: neLatLng.lng()\n            });\n\n        return {\n            sw: swXY,\n            ne: neXY\n        }\n    }\n\n    function updateNodes(qTree) {\n        qTree.depth = 0;\n\n        qTree.visit(function (node, x1, y1, x2, y2) {\n            node.bounds = {\n                x1: x1,\n                y1: y1,\n                x2: x2,\n                y2: y2\n            };\n\n            if (!node.leaf) {\n                var leafNodes = _.filter(node.nodes, function (node) {\n                    return (node && node.leaf);\n                });\n\n                node.containsLeaf = leafNodes.length > 0;\n            }\n        });\n    }\n\n    function pointToArray(point) {\n        return [point.x, point.y];\n    }\n\n    function pointsToArray(xyPoints) {\n        return _.map(xyPoints, pointToArray);\n    }\n\n    function pointInBounds(point, bounds) {\n        var projection = app.map.getProjection(),\n            latLng = projection.fromPointToLatLng(new google.maps.Point(point.x, point.y));\n\n        return bounds.contains(latLng);\n    }\n\n    function createQuadTree(xyPoints, inputBounds) {\n        var quadtree,\n\n            pointsInBounds = _.filter(xyPoints, function (point) {\n                return pointInBounds(point, inputBounds)\n            });\n\n        if (xyPoints.length === pointsInBounds.length) {\n            quadtree = d3.geom.quadtree()\n                .extent([ [0, 0], [255, 255] ])\n            (pointsToArray(pointsInBounds));\n        } else {\n            quadtree = d3.geom.quadtree(pointsInBounds);\n\n        }\n\n        updateNodes(quadtree);\n\n        return quadtree;\n\n    }\n\n    function pointsToGoogleLatLngBounds(x1, y1, x2, y2) {\n        var projection = app.map.getProjection(),\n            swGeo = projection.fromPointToLatLng(new google.maps.Point(x1, y1)),\n            neGeo = projection.fromPointToLatLng(new google.maps.Point(x2, y2));\n\n            return new google.maps.LatLngBounds(swGeo, neGeo);\n    }\n\n    function flattenQuadtree(quadtree) {\n        var nodes = [];\n\n        quadtree.visit(function (node) {\n            nodes.push(node);\n        });\n\n        return nodes;\n    }\n\n    function googleMapsRectangleFromBounds(bounds) {\n        return new google.maps.Rectangle({\n            bounds: bounds,\n            map: app.map,\n            fillOpacity: 0\n        });\n    }\n\n    function collectionToXyPoints() {\n        return _.map(collection.pluck('location'), convertLatLngToXy);\n    }\n\n    function getContainingBounds(nodes) {\n        return _.filter(nodes, function (childNode) {\n            return childNode.containsLeaf;\n        });\n    }\n\n    function boundsContainedBy(innerBounds, outerBounds) {\n        var outerNe = outerBounds.ne,\n            outerSw = outerBounds.sw,\n            innerSw = innerBounds.sw,\n            innerNe = innerBounds.ne;\n\n        return outerNe.x >= innerNe.x &&\n            outerNe.y >= innerNe.y &&\n            outerSw.x <= innerSw.x &&\n            outerSw.y <= innerSw.y;\n    }\n\n    function createAndRenderQuadtree(bounds) {\n        var xyPoints = collectionToXyPoints(),\n            quadtree = createQuadTree(xyPoints, bounds),\n            nodes = flattenQuadtree(quadtree),\n\n            boundsContainsBounds = {},\n\n            containingBoundsSet;\n\n        _.each(rects, function (rect) {\n            rect.setMap(null);\n        });\n\n        containingBoundsSet = _.map(getContainingBounds(nodes), function (node, index) {\n            var nodeBounds = node.bounds,\n                xyBounds = pointsToGoogleLatLngBounds(\n                    nodeBounds.x1,\n                    nodeBounds.y1,\n                    nodeBounds.x2,\n                    nodeBounds.y2\n                );\n\n            xyBounds.id = index;\n\n            return xyBounds;\n        });\n\n        _.each(containingBoundsSet, function (childBounds) {\n            var xyBounds = convertGoogleMapBoundsToXY(childBounds);\n\n            _.times(containingBoundsSet.length, function (index) {\n                var boundsComparedTo = containingBoundsSet[index];\n\n                if (boundsComparedTo.id != childBounds.id) {\n                    var containingXy = convertGoogleMapBoundsToXY(boundsComparedTo),\n                        isBoundsContained = boundsContainedBy(containingXy, xyBounds);\n\n                    if (isBoundsContained) {\n                        if (boundsContainsBounds[childBounds.id]) {\n                            boundsContainsBounds[childBounds.id].push(boundsComparedTo.id);\n                        } else {\n                            boundsContainsBounds[childBounds.id] = [boundsComparedTo.id];\n                        }\n                    }\n                }\n            });\n        });\n\n        _.each(boundsContainsBounds, function (value, key, boundsMapping) {\n            if (!boundsMapping[value]) {\n                rects.push(googleMapsRectangleFromBounds(containingBoundsSet[value]));\n            }\n        });\n\n        app.containingBounds = containingBoundsSet;\n        app.boundsContainsBounds = boundsContainsBounds;\n\n        return quadtree;\n    }\n\n    Backbone.Events.on('map-loaded', function () {\n        mapLoaded.resolve();\n    });\n\n    $.when(mapLoaded, loaded).done(function () {\n        var quadtree;\n\n        Backbone.Events.on('zoom-change', function (bounds) {\n            createAndRenderQuadtree(bounds);\n        });\n\n        Backbone.Events.on('bounds-change', function (bounds) {\n            createAndRenderQuadtree(bounds);\n        });\n\n        collection.each(function (item) {\n            var marker = new google.maps.Marker({\n                position: new google.maps.LatLng(item.attributes.location.lat, item.attributes.location.lng)\n            });\n\n            marker.setMap(app.map);\n        });\n\n        quadtree = createAndRenderQuadtree(app.map.getBounds());\n\n        app.quadtree = quadtree;\n    });\n\n}(app));\n"]}